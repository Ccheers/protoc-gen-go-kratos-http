// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: example/api/example.v1.proto

package exampleapi

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationExampleHelloWorld = "/github.ccheers.pggh.example.Example/HelloWorld"

type ExampleHTTPServer interface {
	// HelloWorldsome comment
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldReply, error)
}
type Examplemiddleware1Middleware middleware.Middleware
type Examplemiddleware2Middleware middleware.Middleware

func NewExampleHTTPServerMiddleware(
	middleware1 Examplemiddleware1Middleware,
	middleware2 Examplemiddleware2Middleware,
) middleware.Middleware {
	return selector.Server(
		selector.Server(
			middleware.Middleware(middleware1),
			middleware.Middleware(middleware2),
		).Path(OperationExampleHelloWorld).Build(),
	).Path(
		OperationExampleHelloWorld,
	).Build()
}

func RegisterExampleHTTPServer(s *http.Server, srv ExampleHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/example/hello", _Example_HelloWorld0_HTTP_Handler(srv))
}

func GenerateExampleHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 1)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/example/hello",
		Comment: "some comment",
	})
	return routes
}

func _Example_HelloWorld0_HTTP_Handler(srv ExampleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in HelloWorldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExampleHelloWorld)
		auditRule := audit.NewAudit(
			"example",
			"hello",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Const: "default",
					},
				},
				{
					Key: "resource_type",
					Value: audit.MetaValue{
						Const: "example",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HelloWorld(ctx, req.(*HelloWorldRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloWorldReply)
		return ctx.Result(200, reply)
	}
}

type ExampleHTTPClient interface {
	HelloWorld(ctx context.Context, req *HelloWorldRequest, opts ...http.CallOption) (rsp *HelloWorldReply, err error)
}

type ExampleHTTPClientImpl struct {
	cc *http.Client
}

func NewExampleHTTPClient(client *http.Client) ExampleHTTPClient {
	return &ExampleHTTPClientImpl{client}
}

func (c *ExampleHTTPClientImpl) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...http.CallOption) (*HelloWorldReply, error) {
	var out HelloWorldReply
	pattern := "/v1/example/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExampleHelloWorld))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
